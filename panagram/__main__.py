import sys
import argparse
import os
import cProfile

from simple_parsing import ArgumentParser, field
from dataclasses import dataclass
from typing import Any, List, Tuple, Type, Union

@dataclass
class View:
    """Display panagram viewer"""
    config: str = field(positional=True)

    def run(self):
        #print("HERE")
        from .view import view
        #print("THERE")
        view(self.config)

@dataclass
class Index:
    """Anchor KMC bitvectors to reference FASTA files to create pan-kmer bitmap"""

    genomes: str = field(positional=True)
    """TSV file with each genome ID in the first column and the path to a gzipped fasta in the second column"""

    out_dir: str = field(alias=["-o"], required=True)
    """Output directory for panagram index"""

    k: int = field(alias=["-k"], default=21)
    """K-mer length (must be same as KMC database)"""

    anchor_only: bool = False
    """Assume KMC databases already exist"""

    def run(self):
        from .index import index
        index(self)#self.genomes, self.out_dir, self.k)

@dataclass
class Bitdump:
    """Query pan-kmer bitmap generated by "panagram index" """

    index_dir: str = field(positional=True)
    """Panagram index directory"""

    coords: str = field(positional=True)
    """Coordinates to query in chr:start-end format"""

    step: int = field(positional=True, nargs="?", default=1)
    """Spacing between output kmers (optimized for multiples of 100)"""

    verbose: bool = field(alias=["-v"], default=False)
    """Output the full bitmap"""

    def run(self):
        from .index import Index #KmerBitmap
        bitmap = Index(self.index_dir)
        genome, chrom, start, end = parse_coords(self.coords)
        bits = bitmap.query_bitmap(genome, chrom, start, end, self.step)

        if self.verbose:
            print(" ".join(bitmap.genome_names))
            for i in range(len(bits)):
                print(" ".join(bits[i].astype(str)))
        else:
            print(bits)

        #g = bitmap.genomes
        #print(g)
        #print(bitmap.genome_len(g[1]))
        #seqs = bitmap.genome_seqs(g[1])
        #print(seqs)
        #print(bitmap.seq_len(g[1], seqs[0]))

        bitmap.close()

@dataclass
class Main:
    """Alignment-free pan-genome viewer

Subcommands:
    index    Anchor KMC bitvectors to reference FASTA files
    view     Display panagram viewer in a browser window
    bitdump  Query pan-kmer bitmap via the commandline"""

    cmd: Union[View, Index, Bitdump]
    cprof: str = field(default=None, help=argparse.SUPPRESS)

    def run(self):
        return self.cmd.run()

def parse_coords(coords):
    genome, chrom, coords = coords.split(":")
    start, end = map(int, coords.split("-"))
    return genome, chrom, start, end

def comma_split(s):
    return s.split(",")

def main():
    parser = ArgumentParser()
    parser.add_arguments(Main, dest="main")
    args = parser.parse_args()
    if args.main.cprof is None:
        args.main.run()
    else:
        cProfile.runctx("args.main.run()",
             {},{"args" : args},
             args.main.cprof)

