import pandas as pd
from panagram.index import Index

configfile: "config.yaml"

#PREFIX = config["prefix"]
index = Index(".", mode="w")
#if PREFIX == ".":
#    PREFIX = ""
#elif len(PREFIX) > 0 and not PREFIX.endswith("/"):
#    PREFIX = PREFIX+"/"


#SAMPLES = pd.read_table(config["samples"]).set_index("name")
SAMPLES = index.samples #pd.read_table(config["samples"]).set_index("name")

#FASTAS = list(config["fasta"].values())
#SAMPLES = list(config["fasta"].keys())
#SAMPLE_IDS = {s : i for i,s in enumerate(SAMPLES)}
TMPDIR = f"tmp/"
KMC_EXTS = ["kmc_pre","kmc_suf"]

def get_fasta(wildcards):
    f = SAMPLES.loc[wildcards.sample, "fasta"]
    return f

def get_fai(wildcards):
    return get_fasta(wildcards)+".fai"

def get_genome_id(wildcards):
    f = SAMPLES.loc[wildcards.sample, "id"]
    return f

def get_onehot_tag(wildcards):
    i = SAMPLES.index.get_loc(wildcards.sample) % 32
    #print(wildcards.sample, i)
    return 1 << i

rule anchor:
    input:
        kmc_pre=expand("kmc/bitvec{i}.kmc_pre", i=range(index.kmc_bitvec_count)),
        kmc_suf=expand("kmc/bitvec{i}.kmc_suf", i=range(index.kmc_bitvec_count)),
        fasta=get_fasta,
        #chrs="anchor/{sample}/chrs.tsv"
    output:
        expand("anchor/{{sample}}/bitmap.{step}.{ext}", step=index.steps, ext=["gz","gzi"])
    run:
        #bitvecs = [k[:-8] for k in input.kmc_pre]
        index[wildcards.sample].run_anchor(index.bitvec_prefixes)
        #index.run_anchor((
        #    index,get_genome_id(wildcards),wildcards.sample,input.fasta,SAMPLES.loc[wildcards.sample,"gff"],True
        #))


rule kmc_bitvec:
    input:
        "kmc/opdef{i}.txt",
    output:
        expand("kmc/bitvec{{i}}.{ext}", ext=KMC_EXTS)
    shell:
        "kmc_tools complex kmc/opdef{wildcards.i}.txt"

rule opdefs:
    input:
        expand("kmc/{sample}.onehot.{ext}", sample=list(SAMPLES.index), ext=KMC_EXTS)
    output:
        expand("kmc/opdef{i}.txt", i=range(index.kmc_bitvec_count))
    run:
        index.init_opdefs()

rule kmc_sample:
    input:
        get_fasta #"{fasta}"
    output:
        expand("kmc/{{sample}}.{db}.{ext}", db=["count","onehot"], ext=KMC_EXTS)
    params:
        tag = get_onehot_tag
    shell:
        f"mkdir -p {TMPDIR}{{wildcards.sample}}; "

        "kmc -k{config[k]} -t{config[kmc][threads]} -m{config[kmc][memory]} "
        f"-ci1 -cs1000 -fm {{input}} kmc/{{wildcards.sample}}.count {TMPDIR}{{wildcards.sample}};"

        f"kmc_tools -t4 transform kmc/{{wildcards.sample}}.count " 
        f"set_counts {{params.tag}} kmc/{{wildcards.sample}}.onehot"

rule faidx:
    input:
        "{fasta}"
    output:
        "{fasta}.fai"
    shell:
        "samtools faidx {input}"

rule mash_sample:
    input:
        get_fasta
    output:
        "{sample}.msh"
    shell:
        "/home/skovaka/code/panagram/build/lib/panagram/extra/mash "
        "sketch -C {wildcards.sample} -o {wildcards.sample}.msh -r -s 10000 {input}"

rule mash_triangle:
    input:
        expand("{sample}.msh", sample=SAMPLES.index)
    output:
        "genome_dist.tsv"
    shell:
        "/home/skovaka/code/panagram/build/lib/panagram/extra/mash "
        "triangle -C -E {input} > genome_dist.tsv"
        
rule all:
    input:
        "genome_dist.tsv",
        expand("anchor/{sample}/bitmap.{step}.{ext}", sample=SAMPLES.index, step=index.steps, ext=["gz","gzi"])
